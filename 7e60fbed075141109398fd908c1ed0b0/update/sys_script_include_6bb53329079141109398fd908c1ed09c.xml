<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_232327_shopping.RecipeUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Build Shopping List based on selected recipes</description>
        <name>RecipeUtils</name>
        <script><![CDATA[var RecipeUtils = Class.create();
RecipeUtils.prototype = {
	initialize: function() {
		this.shoppingList = {};
	},

	buildShoppingList: function(recipes) {
		recipes.forEach(function(recipe) {
			this._addIngredients(recipe);
		}, this);

		this._updateLastUsed(recipes);
		return this.shoppingList;
	},

	_updateLastUsed: function(recipes) {
		var gq = new global.GlideQuery(RecipeUtils.RECIPE_TABLE)
		.where('sys_id', 'IN', recipes)
		.updateMultiple({'last_used': new GlideDate()});
	},

	getHTML: function() {

		var sl = this.shoppingList;

		var html = "";
		for (foodType in sl) {

			html += "<h3>" + foodType + "</h3>";
			html += "<table style='border:0px'>";

			for (ingredient in sl[foodType]) {
				html += "<tr>";
				html += "<td width='300px'>" + ingredient + "</td>";
				var quantity = [sl[foodType][ingredient].quantity, sl[foodType][ingredient].measure].join(' ');
				html += "<td>" + quantity + "</td>";
				html += "</tr>";
			}

			html += "</table>";
		}

		return html;

	},

	_addIngredients: function(recipe) {
		var gqIngredients = new global.GlideQuery(RecipeUtils.INGREDIENTS_TABLE)
		.where('recipe', recipe)
		.orderBy('ingredient.type')
		.select('ingredient.name', 'quantity', 'measurement$DISPLAY', 'quantity', 'ingredient.type$DISPLAY')
		.reduce(function(arr, e){arr.push(e); return arr;},[]);

		gqIngredients.forEach(function(ingredient) {
			var type = ingredient.ingredient.type$DISPLAY;
			this.shoppingList[type] = this.shoppingList[type] || {};

			var ingredientName = ingredient.ingredient.name;
			if (this.shoppingList[type][ingredientName]) {
				this.shoppingList[type][ingredientName].quantity += ingredient.quantity;
			} else {
				this.shoppingList[type][ingredientName] = {
					"quantity": ingredient.quantity,
					"measure": ingredient.measurement$DISPLAY
				};
			}
		}, this);

	},


	type: 'RecipeUtils'
};

RecipeUtils.RECIPE_TABLE = "x_232327_shopping_recipe";
RecipeUtils.INGREDIENT_TABLE = "x_232327_shopping_ingredient";
RecipeUtils.INGREDIENTS_TABLE = "x_232327_shopping_m2m_ingredients_recipes";
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-27 08:57:54</sys_created_on>
        <sys_id>6bb53329079141109398fd908c1ed09c</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>RecipeUtils</sys_name>
        <sys_package display_value="Shopping List" source="x_232327_shopping">7e60fbed075141109398fd908c1ed0b0</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Shopping List">7e60fbed075141109398fd908c1ed0b0</sys_scope>
        <sys_update_name>sys_script_include_6bb53329079141109398fd908c1ed09c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-27 10:49:55</sys_updated_on>
    </sys_script_include>
</record_update>
